// PHASE initialisation du script
// ------------------------------

	// variables
	// ---------
int Right  = PS4_RIGHT;  // cette variable contiendra la touche droite  
int Left   = PS4_LEFT;   // idem pour gauche
int cancel = 0;			 // variable pour indiquer si un combo doit être annulé
						 // 0 = aucun combo à annuler
						 // 1 = annuler les combos associés à la touche L3
						 // 2 = idem pour R3
						 
	// echanger les touches lors des combos
	// ------------------------------------
remap PS4_SQUARE -> PS4_CROSS;  // le carré deviendra croix
remap PS4_CROSS	 -> PS4_SQUARE; // croix devient carré

// BOUCLE PRINCIPALE
// -----------------
main { 

   // pour inverser les combos selon que le perso est a droite ou a gauche
   // Si le perso est a gauche appuyer sur DPAD Droite avant de faire un combo 

	if(get_val(PS4_RIGHT)) {
 	 	Right=16;   // 16 = PS4_RIGHT cf . http://cronusmax.com/manual/identifiers.htm
 	 	Left=15;    // 15 = PS4_LEFT
 	 }
   
   // sinon appuyer sur DPAD Gauche  avant de lancer les combos
   // Le perso est a droite de l'écran il faut inverser les combos !
 	
 	if(get_val(PS4_LEFT)) {
 	 	Right=15;  // Right prend la valeur PS4_LEFT dans les combos 
 	 	Left=16;   // Left devient PS4_RIGHT  (ligne 57)
 	 }             
             
    // lancement des combos
    //----------------------
    
    // Slow Escape appuie sur L3
    if(event_press(PS4_L3)) 	combo_run(SlowEscape);                                                     
                                                       
    // MidH = L3 vers la gauche                 
   	else if (get_val (PS4_LX) <= -70) { // else = sinon
   		cancel = 1;						// on positionne la variable 
   										// d'annulation à 1 car L3 a bougé
   		combo_run(MidH);				// lancement du combo
   	}
   
   	// LowH = L3 vers le bas                   
   	else if (get_val (PS4_LY) >= 70) {
   		cancel = 1;
   		combo_run (LowH);
   	}
 
   	// HighH =  L3 vers le Haut                   
   	else if (get_val (PS4_LY) <= -70) {
   		cancel = 1;
   		combo_run (HighH);
   	}
 
 	// Izuna = R3 vers la droite 
    else if (get_val (PS4_RX) >= 70) {
    	cancel = 2;						// = 2 car c'est R3 qui a bougé
    	combo_run (Izuna);
    }
    
    else cancel = 0;					// Aucun des joysticks n'a bougé
 
 	// Stopper un combo en cours d'execution
 	// -------------------------------------
 	//
 	// 	La version précédente du script faisait tourner combo_stop 
 	//  tout le temps. (car L3 et R3 ne bougent presque jamais.
 	//  Grace a la variable cancel on ne lance combo_stop uniquement
 	//  s'ils ont bougé
 	// -------------------------------------
 	
 	// Detecter si cancel est a 1 ou 2 
 	if (cancel == 1) {  // C'est L3 qui a bougé
	    // Si L3 n'est plus vers la gauche (LX) ni en haut ni en bas (LY)            
	    if (abs(get_val (PS4_LX)) <= 20) && (abs(get_val (PS4_LY)) <= 20) {
	    	combo_stop(MidH);
            combo_stop(LowH);		// Arrêt des 2 combos      
            combo_stop(HighH);		// même s'ils ne sont pas lancés
	    }  	
 	}
 	else if (cancel == 2) { // c'est R3 qui a bougé
	    // Detecter si RX est revenu en position de départ 
	    if ((abs(get_val (PS4_RX)) <= 20) combo_stop(Izuna);  // arret du combo Izuna 
 	}
 	

   
}// main block end


// liste des combos


combo HighH  {
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    set_val(PS4_UP,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(300);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(300);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(40);
} // end combo
combo MidH  {
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(300);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(500);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(40);
} // end combo
combo LowH  {
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    set_val(PS4_DOWN,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(300);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(800);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    set_val(PS4_SQUARE,100);
    wait(40);
    wait(40);
} // end combo
combo Izuna  {
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    set_val(PS4_CROSS,100);
    wait(40);
    wait(500);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    set_val(PS4_CROSS,100);
    wait(40);
    wait(500);
    set_val(PS4_UP,100);
    wait(40);
    wait(40);
    set_val(Left,100);
    wait(40);
    wait(40);
    set_val(PS4_DOWN,100);
    wait(40);
    wait(40);
    set_val(Right,100);
    wait(40);
    wait(40);
    set_val(PS4_UP,100);
    set_val(PS4_CROSS,100);
    wait(40);
    wait(40);
} // end combo
combo SlowEscape  {
    set_val(PS4_SQUARE,100);
    wait(20);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_DOWN,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Right,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(PS4_UP,100);
    set_val(Left,100);
    wait(10);
    set_val(PS4_SQUARE,100);
    set_val(Left,100);
    wait(10);
} // end combo
combo KoreanBackdash  {
    set_val(Left,100);
    wait(60);
    wait(60);
    set_val(Left,100);
    wait(60);
    wait(60);
    set_val(PS4_DOWN,100);
    set_val(Left,100);
    wait(60);
    wait(60);
    set_val(Left,100);
    wait(60);
    wait(60);
} // end combo